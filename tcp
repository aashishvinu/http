#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>

int main(int argc, char *argv[]) {
    if (argc != 3) {
        fprintf(stderr, "Usage: %s <IP address> <Port number>\n", argv[0]);
        exit(1);
    }

    struct sockaddr_in server;
    int sd;
    char buffer[200];

    if ((sd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("Socket failed:");
        exit(1);
    }

    bzero(&server, sizeof(server));
    server.sin_family = AF_INET;
    server.sin_port = htons(atoi(argv[2]));

    if (inet_pton(AF_INET, argv[1], &server.sin_addr) <= 0) {
        perror("Invalid address or Address not supported:");
        exit(1);
    }

    if (connect(sd, (struct sockaddr *)&server, sizeof(server)) < 0) {
        perror("Connection failed:");
        exit(1);
    }

    printf("Enter message: ");
    if (fgets(buffer, sizeof(buffer), stdin) == NULL) {
        perror("Input failed:");
        close(sd);
        exit(1);
    }

    buffer[strlen(buffer) - 1] = '\0';

    if (write(sd, buffer, strlen(buffer)) < 0) {
        perror("Write failed:");
        close(sd);
        exit(1);
    }

    if (read(sd, buffer, sizeof(buffer)) < 0) {
        perror("Read failed:");
        close(sd);
        exit(1);
    }

    printf("Server response: %s\n", buffer);

    close(sd);

    return 0;
}

_

#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>

int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <Port number>\n", argv[0]);
        exit(1);
    }

    struct sockaddr_in server, cli;
    int cli_len, sd, data, n, i, len, temp;
    char buffer[100];

    if ((sd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("Socket failed:");
        exit(1);
    }

    bzero(&server, sizeof(server));
    server.sin_family = AF_INET;
    server.sin_port = htons(atoi(argv[1]));
    server.sin_addr.s_addr = htonl(INADDR_ANY);

    if (bind(sd, (struct sockaddr *) &server, sizeof(server)) < 0) {
        perror("Bind failed:");
        exit(1);
    }

    listen(sd, 5);

    cli_len = sizeof(cli);
    if ((data = accept(sd, (struct sockaddr *) &cli, &cli_len)) < 0) {
        perror("Accept failed:");
        exit(1);
    }

    if (read(data, buffer, sizeof(buffer)) < 0) {
        perror("Read failed:");
        close(data);
        close(sd);
        exit(1);
    }

    len = strlen(buffer);
    for (i = 0; i < len / 2; i++) {
        temp = buffer[i];
        buffer[i] = buffer[len - 1 - i];
        buffer[len - 1 - i] = temp;
    }

    if (write(data, buffer, strlen(buffer)) < 0) {
        perror("Write failed:");
        close(data);
        close(sd);
        exit(1);
    }

    close(data);
    close(sd);

    return 0;
}
